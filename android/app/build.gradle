def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 28

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.icooker"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    //release 相关配置
    signingConfigs {
        releaseConfig {
            storeFile file("../icooker.jks")
            storePassword project.hasProperty("KEYSTORE_PASSWORD") ? KEYSTORE_PASSWORD : System.getenv("KEYSTORE_PASSWORD")
            keyAlias project.hasProperty("ALIAS_NAME") ? ALIAS_NAME : System.getenv("ALIAS_NAME")
            keyPassword project.hasProperty("ALIAS_PASSWORD") ? ALIAS_PASSWORD : System.getenv("ALIAS_PASSWORD")
        }
        debug{

        }
    }

    buildTypes {
//       release {
//           // TODO: Add your own signing config for the release build.
//           // Signing with the debug keys for now, so `flutter run --release` works.
//           signingConfig signingConfigs.releaseConfig

            // 编译出的apk重命名
            // 这也是groovy的代码，这里的代码作用是重命名最后打包出来的apk
            // 根据 def fileName 设置的格式来命名，${}表示的是某个变量的引用
        //    android.applicationVariants.all { variant ->
        //        variant.outputs.all { output ->
        //            def outputFile = output.outputFile
        //            if (outputFile != null && outputFile.name.endsWith('.apk')) {
        //                def fileName = "iCooker_v${defaultConfig.versionName}_${releaseTime()}.apk"
        //                //低版本gradle
        //            //    output.outputFile = new File(outputFile.parent,fileName)
        //                //高版本gradle
        //                outputFileName = fileName
        //            }
        //        }
        //    }

//           ndk {
//               //设置支持的SO库架构
//               abiFilters 'arm64-v8a'
//           }
//       }
        release {
            signingConfig signingConfigs.debug
            ndk {
                //设置支持的SO库架构
                abiFilters 'arm64-v8a', 'x86', 'x86_64'
            }
        }
    }
}

static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
